{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`<vaadin-overlay>` is a Web Component for creating overlays. The content of the overlay\ncan be populated in two ways: imperatively by using renderer callback function and\ndeclaratively by using Polymer's Templates.\n\n### Rendering\n\nBy default, the overlay uses the content provided by using the renderer callback function.\n\nThe renderer function provides `root`, `owner`, `model` arguments when applicable.\nGenerate DOM content by using `model` object properties if needed, append it to the `root`\nelement and control the state of the host element by accessing `owner`. Before generating new\ncontent, users are able to check if there is already content in `root` for reusing it.\n\n```html\n<vaadin-overlay id=\"overlay\"></vaadin-overlay>\n```\n```js\nconst overlay = document.querySelector('#overlay');\noverlay.renderer = function(root) {\n root.textContent = \"Overlay content\";\n};\n```\n\nRenderer is called on the opening of the overlay and each time the related model is updated.\nDOM generated during the renderer call can be reused\nin the next renderer call and will be provided with the `root` argument.\nOn first call it will be empty.\n\n**NOTE:** when the renderer property is defined, the `<template>` content is not used.\n\n### Templating\n\nAlternatively, the content can be provided with Polymer Template.\nOverlay finds the first child template and uses that in case renderer callback function\nis not provided. You can also set a custom template using the `template` property.\n\nAfter the content from the template is stamped, the `content` property\npoints to the content container.\n\nThe overlay provides `forwardHostProp` when calling\n`Polymer.Templatize.templatize` for the template, so that the bindings\nfrom the parent scope propagate to the content.  You can also pass\ncustom `instanceProps` object using the `instanceProps` property.\n\n```html\n<vaadin-overlay>\n  <template>Overlay content</template>\n</vaadin-overlay>\n```\n\n**NOTE:** when using `instanceProps`: because of the Polymer limitation,\nevery template can only be templatized once, so it is important\nto set `instanceProps` before the `template` is assigned to the overlay.\n\n### Styling\n\nTo style the overlay content, use styles in the parent scope:\n\n- If the overlay is used in a component, then the component styles\n  apply the overlay content.\n- If the overlay is used in the global DOM scope, then global styles\n  apply to the overlay content.\n\nSee examples for styling the overlay content in the live demos.\n\nThe following Shadow DOM parts are available for styling the overlay component itself:\n\nPart name  | Description\n-----------|---------------------------------------------------------|\n`backdrop` | Backdrop of the overlay\n`overlay`  | Container for position/sizing/alignment of the content\n`content`  | Content of the overlay\n\nThe following state attributes are available for styling:\n\nAttribute | Description | Part\n---|---|---\n`opening` | Applied just after the overlay is attached to the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\n`closing` | Applied just before the overlay is detached from the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\n\nThe following custom CSS properties are available for styling:\n\nCustom CSS property | Description | Default value\n---|---|---\n`--vaadin-overlay-viewport-bottom` | Bottom offset of the visible viewport area | `0` or detected offset\n\nSee [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)",
      "summary": "",
      "path": "src/vaadin-overlay.js",
      "properties": [
        {
          "name": "theme",
          "type": "string | null | undefined",
          "description": "Helper property with theme attribute value facilitating propagation\nin shadow DOM.\n\nEnables the component implementation to propagate the `theme`\nattribute value to the subcomponents in Shadow DOM by binding\nthe subcomponent’s \"theme\" attribute to the `theme` property of\nthe host.\n\n**NOTE:** Extending the mixin only provides the property for binding,\nand does not make the propagation alone.\n\nSee [Theme Attribute and Subcomponents](https://github.com/vaadin/vaadin-themable-mixin/wiki/5.-Theme-Attribute-and-Subcomponents).\npage for more information.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js",
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ThemePropertyMixin"
        },
        {
          "name": "dir",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-element-mixin/vaadin-dir-mixin.js",
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "DirMixin"
        },
        {
          "name": "_last",
          "type": "boolean",
          "description": "returns true if this is the last one in the opened overlays stack",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 706,
              "column": 2
            },
            "end": {
              "line": 708,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "When true, the overlay is visible and attached to body.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_openedChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "owner",
          "type": "HTMLElement",
          "description": "Owner element passed with renderer function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Element"
            }
          }
        },
        {
          "name": "renderer",
          "type": "(OverlayRenderer | null | undefined)",
          "description": "Custom function for rendering the content of the overlay.\nReceives three arguments:\n\n- `root` The root container DOM element. Append your content to it.\n- `owner` The host element of the renderer function.\n- `model` The object with the properties related with rendering.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "template",
          "type": "(HTMLTemplateElement | null | undefined)",
          "description": "The template of the overlay content.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "instanceProps",
          "type": "Object | null | undefined",
          "description": "Optional argument for `Polymer.Templatize.templatize`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "content",
          "type": "(!HTMLElement | undefined)",
          "description": "References the content container after the template is stamped.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "withBackdrop",
          "type": "boolean",
          "description": "When true the overlay has backdrop on top of content when opened.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 250,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "model",
          "type": "Object | null | undefined",
          "description": "Object with properties that is passed to `renderer` function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "modeless",
          "type": "boolean",
          "description": "When true the overlay won't disable the main content, showing\nit doesn’t change the functionality of the user interface.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_modelessChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hidden",
          "type": "boolean",
          "description": "When set to true, the overlay is hidden. This also closes the overlay\nimmediately in case there is a closing animation in progress.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "focusTrap",
          "type": "boolean",
          "description": "When true move focus to the first focusable element in the overlay,\nor to the overlay if there are no focusable elements.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "restoreFocusOnClose",
          "type": "boolean",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 6
            },
            "end": {
              "line": 297,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_mouseDownInside",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_mouseUpInside",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 6
            },
            "end": {
              "line": 307,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_instance",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_originalContentPart",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 315,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_contentNodes",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_oldOwner",
          "type": "Element | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 6
            },
            "end": {
              "line": 321,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Element"
            }
          }
        },
        {
          "name": "_oldModel",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 6
            },
            "end": {
              "line": 324,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_oldTemplate",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 6
            },
            "end": {
              "line": 327,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_oldInstanceProps",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 6
            },
            "end": {
              "line": 330,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_oldRenderer",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 333,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_oldOpened",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 6
            },
            "end": {
              "line": 336,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "attributeChangedCallback",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-element-mixin/vaadin-dir-mixin.js",
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "newValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DirMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 425,
              "column": 2
            },
            "end": {
              "line": 433,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 2
            },
            "end": {
              "line": 443,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__subscribe",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-element-mixin/vaadin-dir-mixin.js",
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "push",
              "defaultValue": "true"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DirMixin"
        },
        {
          "name": "__getNormalizedScrollLeft",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-element-mixin/vaadin-dir-mixin.js",
            "start": {
              "line": 109,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element"
            }
          ],
          "return": {
            "type": "number"
          },
          "inheritedFrom": "DirMixin"
        },
        {
          "name": "__setNormalizedScrollLeft",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-element-mixin/vaadin-dir-mixin.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element"
            },
            {
              "name": "scrollLeft",
              "type": "number"
            }
          ],
          "inheritedFrom": "DirMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 2
            },
            "end": {
              "line": 376,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detectIosNavbar",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 2
            },
            "end": {
              "line": 397,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setTemplateFromNodes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 403,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "nodes",
              "type": "!Array.<!Element>"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "close",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 2
            },
            "end": {
              "line": 422,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sourceEvent",
              "type": "Event="
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ironOverlayCanceled",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 2
            },
            "end": {
              "line": 448,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_mouseDownListener",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 2
            },
            "end": {
              "line": 453,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_mouseUpListener",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 2
            },
            "end": {
              "line": 458,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_outsideClickListener",
          "description": "We need to listen on 'click' / 'tap' event and capture it and close the overlay before\npropagating the event to the listener in the button. Otherwise, if the clicked button would call\nopen(), this would happen: https://www.youtube.com/watch?v=Z86V_ICUCD4",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 470,
              "column": 2
            },
            "end": {
              "line": 490,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_keydownListener",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 498,
              "column": 2
            },
            "end": {
              "line": 523,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ensureTemplatized",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 2
            },
            "end": {
              "line": 528,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 536,
              "column": 2
            },
            "end": {
              "line": 565,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            },
            {
              "name": "wasOpened"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 568,
              "column": 2
            },
            "end": {
              "line": 572,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hidden"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_shouldAnimate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 578,
              "column": 2
            },
            "end": {
              "line": 582,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_enqueueAnimation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 589,
              "column": 2
            },
            "end": {
              "line": 601,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string"
            },
            {
              "name": "callback",
              "type": "Function"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_flushAnimation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 607,
              "column": 2
            },
            "end": {
              "line": 612,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_animatedOpening",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 615,
              "column": 2
            },
            "end": {
              "line": 636,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_attachOverlay",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 639,
              "column": 2
            },
            "end": {
              "line": 644,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_animatedClosing",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 647,
              "column": 2
            },
            "end": {
              "line": 683,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachOverlay",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 686,
              "column": 2
            },
            "end": {
              "line": 689,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_modelessChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 711,
              "column": 2
            },
            "end": {
              "line": 721,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "modeless"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addGlobalListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 724,
              "column": 2
            },
            "end": {
              "line": 731,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_enterModalState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 734,
              "column": 2
            },
            "end": {
              "line": 748,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeGlobalListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 751,
              "column": 2
            },
            "end": {
              "line": 756,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_exitModalState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 759,
              "column": 2
            },
            "end": {
              "line": 781,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeOldContent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 784,
              "column": 2
            },
            "end": {
              "line": 808,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_stampOverlayTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 815,
              "column": 2
            },
            "end": {
              "line": 861,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement"
            },
            {
              "name": "instanceProps",
              "type": "object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeNewRendererOrTemplate",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 864,
              "column": 2
            },
            "end": {
              "line": 870,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "oldTemplate"
            },
            {
              "name": "renderer"
            },
            {
              "name": "oldRenderer"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "Manually invoke existing renderer.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 875,
              "column": 2
            },
            "end": {
              "line": 879,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_templateOrRendererChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 882,
              "column": 2
            },
            "end": {
              "line": 917,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "renderer"
            },
            {
              "name": "owner"
            },
            {
              "name": "model"
            },
            {
              "name": "instanceProps"
            },
            {
              "name": "opened"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isFocused",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 924,
              "column": 2
            },
            "end": {
              "line": 926,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "Element"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_focusedIndex",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 933,
              "column": 2
            },
            "end": {
              "line": 936,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "elements",
              "type": "Array.<Element>"
            }
          ],
          "return": {
            "type": "number"
          }
        },
        {
          "name": "_cycleTab",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 943,
              "column": 2
            },
            "end": {
              "line": 961,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "increment",
              "type": "number"
            },
            {
              "name": "index",
              "type": "(number | undefined)"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getFocusableElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 967,
              "column": 2
            },
            "end": {
              "line": 970,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Array.<!HTMLElement>"
          }
        },
        {
          "name": "_getActiveElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 976,
              "column": 2
            },
            "end": {
              "line": 990,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!Element"
          }
        },
        {
          "name": "_deepContains",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 997,
              "column": 2
            },
            "end": {
              "line": 1008,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "bringToFront",
          "description": "Brings the overlay as visually the frontmost one",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1013,
              "column": 2
            },
            "end": {
              "line": 1022,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "finalize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-element-mixin/vaadin-dir-mixin.js",
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "DirMixin"
        },
        {
          "name": "_includeMatchingThemes",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js",
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 73,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ThemableMixin"
        },
        {
          "name": "_includeStyle",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../node_modules/%40vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js",
            "start": {
              "line": 76,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "moduleName"
            },
            {
              "name": "template"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ThemableMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 107,
          "column": 0
        },
        "end": {
          "line": 1023,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OverlayElement",
      "attributes": [
        {
          "name": "opened",
          "description": "When true, the overlay is visible and attached to body.",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 198,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "owner",
          "description": "Owner element passed with renderer function",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 20
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "renderer",
          "description": "Custom function for rendering the content of the overlay.\nReceives three arguments:\n\n- `root` The root container DOM element. Append your content to it.\n- `owner` The host element of the renderer function.\n- `model` The object with the properties related with rendering.",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 24
            }
          },
          "metadata": {},
          "type": "(OverlayRenderer | null | undefined)"
        },
        {
          "name": "template",
          "description": "The template of the overlay content.",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(HTMLTemplateElement | null | undefined)"
        },
        {
          "name": "instance-props",
          "description": "Optional argument for `Polymer.Templatize.templatize`.",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 6
            },
            "end": {
              "line": 231,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "content",
          "description": "References the content container after the template is stamped.",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(!HTMLElement | undefined)"
        },
        {
          "name": "with-backdrop",
          "description": "When true the overlay has backdrop on top of content when opened.",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 6
            },
            "end": {
              "line": 250,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "model",
          "description": "Object with properties that is passed to `renderer` function",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 255,
              "column": 19
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "modeless",
          "description": "When true the overlay won't disable the main content, showing\nit doesn’t change the functionality of the user interface.",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hidden",
          "description": "When set to true, the overlay is hidden. This also closes the overlay\nimmediately in case there is a closing animation in progress.",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "focus-trap",
          "description": "When true move focus to the first focusable element in the overlay,\nor to the overlay if there are no focusable elements.",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "restore-focus-on-close",
          "description": "Set to true to enable restoring of focus when overlay is closed.",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 6
            },
            "end": {
              "line": 297,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "vaadin-overlay-close",
          "description": "vaadin-overlay-close\nfired before the `vaadin-overlay` will be closed. If canceled the closing of the overlay is canceled as well.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "vaadin-overlay-escape-press",
          "description": "vaadin-overlay-escape-press\nfired before the `vaadin-overlay` will be closed on ESC button press. If canceled the closing of the overlay is canceled as well.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "vaadin-overlay-open",
          "description": "vaadin-overlay-open\nfired after the `vaadin-overlay` is opened.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "vaadin-overlay-outside-click",
          "description": "We need to listen on 'click' / 'tap' event and capture it and close the overlay before\npropagating the event to the listener in the button. Otherwise, if the clicked button would call\nopen(), this would happen: https://www.youtube.com/watch?v=Z86V_ICUCD4",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "template-changed",
          "description": "Fired when the `template` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "content-changed",
          "description": "Fired when the `content` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "vaadin-overlay",
      "mixins": [
        "ThemableMixin",
        "DirMixin"
      ]
    }
  ],
  "classes": [
    {
      "description": "`Polymer.IronFocusablesHelper` relies on some Polymer-specific legacy API,\nespecially the `root` property which does not exist for native shadow DOM.\nThat's why we have this helper here.\nSee https://github.com/PolymerElements/iron-overlay-behavior/issues/282",
      "summary": "",
      "path": "src/vaadin-focusables-helper.js",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "getTabbableNodes",
          "description": "Returns a sorted array of tabbable nodes, including the root node.\nIt searches the tabbable nodes in the light and shadow dom of the children,\nsorting the result by tabindex.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 29,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node"
            }
          ],
          "return": {
            "type": "!Array.<!HTMLElement>"
          }
        },
        {
          "name": "isFocusable",
          "description": "Returns if a element is focusable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "!HTMLElement"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "isTabbable",
          "description": "Returns if a element is tabbable. To be tabbable, a element must be\nfocusable, visible, and with a tabindex !== -1.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 63,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "!HTMLElement"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_normalizedTabIndex",
          "description": "Returns the normalized element tabindex. If not focusable, returns -1.\nIt checks for the attribute \"tabindex\" instead of the element property\n`tabIndex` since browsers assign different values to it.\ne.g. in Firefox `<div contenteditable>` has `tabIndex = -1`",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "!HTMLElement"
            }
          ],
          "return": {
            "type": "!number"
          }
        },
        {
          "name": "_collectTabbableNodes",
          "description": "Searches for nodes that are tabbable and adds them to the `result` array.\nReturns if the `result` array needs to be sorted by tabindex.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 128,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The starting point for the search; added to `result` if tabbable."
            },
            {
              "name": "result",
              "type": "!Array.<!HTMLElement>"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_isVisible",
          "description": "Returns false if the element has `visibility: hidden` or `display: none`",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 2
            },
            "end": {
              "line": 145,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "!HTMLElement"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_sortByTabIndex",
          "description": "Sorts an array of tabbable elements by tabindex. Returns a new array.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tabbables",
              "type": "!Array.<!HTMLElement>"
            }
          ],
          "return": {
            "type": "!Array.<!HTMLElement>"
          }
        },
        {
          "name": "_mergeSortByTabIndex",
          "description": "Merge sort iterator, merges the two arrays into one, sorted by tab index.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 184,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "left",
              "type": "!Array.<!HTMLElement>"
            },
            {
              "name": "right",
              "type": "!Array.<!HTMLElement>"
            }
          ],
          "return": {
            "type": "!Array.<!HTMLElement>"
          }
        },
        {
          "name": "_hasLowerTabOrder",
          "description": "Returns if element `a` has lower tab order compared to element `b`\n(both elements are assumed to be focusable and tabbable).\nElements with tabindex = 0 have lower tab order compared to elements\nwith tabindex > 0.\nIf both have same tabindex, it returns false.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 2
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "!HTMLElement"
            },
            {
              "name": "b",
              "type": "!HTMLElement"
            }
          ],
          "return": {
            "type": "boolean"
          }
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 204,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "FocusablesHelper"
    }
  ]
}
