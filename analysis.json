{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Vaadin",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "src/vaadin-overlay.html",
        "start": {
          "line": 830,
          "column": 4
        },
        "end": {
          "line": 830,
          "column": 40
        }
      },
      "elements": [
        {
          "description": "`<vaadin-overlay>` is a Web Component for creating overlays. The content of the overlay\ncan be populated in two ways: imperatively by using renderer callback function and\ndeclaratively by using Polymer's Templates.\n\n### Rendering\n\nBy default, the overlay uses the content provided by using the renderer callback function.\n\nThe renderer function provides `root`, `owner`, `model` arguments when applicable.\nGenerate DOM content by using `model` object properties if needed, append it to the `root`\nelement and control the state of the host element by accessing `owner`. Before generating new\ncontent, users are able to check if there is already content in `root` for reusing it.\n\n```html\n<vaadin-overlay id=\"overlay\"></vaadin-overlay>\n```\n```js\nconst overlay = document.querySelector('#overlay');\noverlay.renderer = function(root) {\n root.textContent = \"Overlay content\";\n};\n```\n\n**NOTE:** when the renderer property is defined, the `<template>` content is not used.\n\n### Templating\n\nAlternatively, the content can be provided with Polymer Template.\nOverlay finds the first child template and uses that in case renderer callback function\nis not provided. You can also set a custom template using the `template` property.\n\nAfter the content from the template is stamped, the `content` property\npoints to the content container.\n\nThe overlay provides `forwardHostProp` when calling\n`Polymer.Templatize.templatize` for the template, so that the bindings\nfrom the parent scope propagate to the content.  You can also pass\ncustom `instanceProps` object using the `instanceProps` property.\n\n```html\n<vaadin-overlay>\n  <template>Overlay content</template>\n</vaadin-overlay>\n```\n\n**NOTE:** when using `instanceProps`: because of the Polymer limitation,\nevery template can only be templatized once, so it is important\nto set `instanceProps` before the `template` is assigned to the overlay.\n\n### Styling\n\nTo style the overlay content, use styles in the parent scope:\n\n- If the overlay is used in a component, then the component styles\n  apply the overlay content.\n- If the overlay is used in the global DOM scope, then global styles\n  apply to the overlay content.\n\nSee examples for styling the overlay content in the live demos.\n\nThe following Shadow DOM parts are available for styling the overlay component itself:\n\nPart name  | Description\n-----------|---------------------------------------------------------|\n`backdrop` | Backdrop of the overlay\n`overlay`  | Container for position/sizing/alignment of the content\n`content`  | Content of the overlay\n\nThe following state attributes are available for styling:\n\nAttribute | Description | Part\n---|---|---\n`opening` | Applied just after the overlay is attached to the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\n`closing` | Applied just before the overlay is detached from the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\n\nThe following custom CSS properties are available for styling:\n\nCustom CSS property | Description | Default value\n---|---|---\n`--vaadin-overlay-viewport-bottom` | Bottom offset of the visible viewport area | `0` or detected offset\n\nSee [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)",
          "summary": "",
          "path": "src/vaadin-overlay.html",
          "properties": [
            {
              "name": "_last",
              "type": "?",
              "description": "returns true if this is the last one in the opened overlays stack\n       ",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 604,
                  "column": 6
                },
                "end": {
                  "line": 606,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "opened",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 10
                },
                "end": {
                  "line": 238,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "owner",
              "type": "Element | null | undefined",
              "description": "Owner element passed with renderer function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 243,
                  "column": 10
                },
                "end": {
                  "line": 243,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Element"
                }
              }
            },
            {
              "name": "renderer",
              "type": "Function | null | undefined",
              "description": "Custom function for rendering the content of the overlay.\nReceives arguments `root`, `owner`, `model`\n\n`root` The root container element. Users are able to append content to it.\n\n`owner` The host element of the renderer function.\n\n`model` Object with properties that could be required during the rendering process.\n\n**NOTE:** The renderer callback can be called several times with previous content available",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 257,
                  "column": 10
                },
                "end": {
                  "line": 257,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "template",
              "type": "Object | null | undefined",
              "description": "The template of the overlay content.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 262,
                  "column": 10
                },
                "end": {
                  "line": 265,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "instanceProps",
              "type": "Object | null | undefined",
              "description": "Optional argument for `Polymer.Templatize.templatize`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 270,
                  "column": 10
                },
                "end": {
                  "line": 272,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "content",
              "type": "Object | null | undefined",
              "description": "References the content container after the template is stamped.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 277,
                  "column": 10
                },
                "end": {
                  "line": 280,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "withBackdrop",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 282,
                  "column": 10
                },
                "end": {
                  "line": 286,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "model",
              "type": "Object | null | undefined",
              "description": "Object with properties that is passed to `renderer` function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 291,
                  "column": 10
                },
                "end": {
                  "line": 291,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "modeless",
              "type": "boolean | null | undefined",
              "description": "When true the overlay won't disable the main content, showing\nit doesnâ€™t change the functionality of the user interface.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 10
                },
                "end": {
                  "line": 302,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_modelessChanged\"",
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "focusTrap",
              "type": "boolean | null | undefined",
              "description": "When true move focus to the first focusable element in the overlay,\nor to the overlay if there are no focusable elements.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 308,
                  "column": 10
                },
                "end": {
                  "line": 311,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "_mouseDownInside",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 313,
                  "column": 10
                },
                "end": {
                  "line": 315,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "_mouseUpInside",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 317,
                  "column": 10
                },
                "end": {
                  "line": 319,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "_instance",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 321,
                  "column": 10
                },
                "end": {
                  "line": 323,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_boundIronOverlayCanceledListener",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 325,
                  "column": 10
                },
                "end": {
                  "line": 327,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_originalContentPart",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 329,
                  "column": 10
                },
                "end": {
                  "line": 329,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_contentNodes",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 331,
                  "column": 10
                },
                "end": {
                  "line": 331,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "_oldOwner",
              "type": "Element | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 333,
                  "column": 10
                },
                "end": {
                  "line": 333,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Element"
                }
              }
            },
            {
              "name": "_oldModel",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 335,
                  "column": 10
                },
                "end": {
                  "line": 335,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_oldTemplate",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 337,
                  "column": 10
                },
                "end": {
                  "line": 337,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_oldInstanceProps",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 339,
                  "column": 10
                },
                "end": {
                  "line": 339,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_oldRenderer",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 341,
                  "column": 10
                },
                "end": {
                  "line": 341,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 374,
                  "column": 6
                },
                "end": {
                  "line": 385,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_detectIosNavbar",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 387,
                  "column": 6
                },
                "end": {
                  "line": 404,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_setTemplateFromNodes",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 406,
                  "column": 6
                },
                "end": {
                  "line": 408,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "nodes"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "close",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 414,
                  "column": 6
                },
                "end": {
                  "line": 420,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "sourceEvent"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 422,
                  "column": 6
                },
                "end": {
                  "line": 433,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 435,
                  "column": 6
                },
                "end": {
                  "line": 451,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_mouseDownListener",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 453,
                  "column": 6
                },
                "end": {
                  "line": 455,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_mouseUpListener",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 457,
                  "column": 6
                },
                "end": {
                  "line": 459,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_outsideClickListener",
              "description": "We need to listen on 'click' / 'tap' event and capture it and close the overlay before\npropagating the event to the listener in the button. Otherwise, if the clicked button would call\nopen(), this would happen: https://www.youtube.com/watch?v=Z86V_ICUCD4",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 469,
                  "column": 6
                },
                "end": {
                  "line": 486,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_keydownListener",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 492,
                  "column": 6
                },
                "end": {
                  "line": 513,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_ensureTemplatized",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 515,
                  "column": 6
                },
                "end": {
                  "line": 517,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_openedChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 523,
                  "column": 6
                },
                "end": {
                  "line": 547,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "opened"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_animatedOpening",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 549,
                  "column": 6
                },
                "end": {
                  "line": 562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_attachOverlay",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 564,
                  "column": 6
                },
                "end": {
                  "line": 568,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_animatedClosing",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 570,
                  "column": 6
                },
                "end": {
                  "line": 586,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_detachOverlay",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 588,
                  "column": 6
                },
                "end": {
                  "line": 599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_modelessChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 608,
                  "column": 6
                },
                "end": {
                  "line": 616,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "modeless"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_enterModalState",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 618,
                  "column": 6
                },
                "end": {
                  "line": 630,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_exitModalState",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 632,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_removeOldContent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 645,
                  "column": 6
                },
                "end": {
                  "line": 669,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_stampOverlayTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 671,
                  "column": 6
                },
                "end": {
                  "line": 742,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_removeNewRendererOrTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 744,
                  "column": 6
                },
                "end": {
                  "line": 750,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "oldTemplate"
                },
                {
                  "name": "renderer"
                },
                {
                  "name": "oldRenderer"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_templateOrRendererChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 752,
                  "column": 6
                },
                "end": {
                  "line": 782,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "renderer"
                },
                {
                  "name": "owner"
                },
                {
                  "name": "model"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_isFocused",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 784,
                  "column": 6
                },
                "end": {
                  "line": 786,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "element"
                }
              ]
            },
            {
              "name": "_focusedIndex",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 788,
                  "column": 6
                },
                "end": {
                  "line": 791,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "elements"
                }
              ]
            },
            {
              "name": "_cycleTab",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 793,
                  "column": 6
                },
                "end": {
                  "line": 811,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "increment"
                },
                {
                  "name": "index"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_getFocusableElements",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 813,
                  "column": 6
                },
                "end": {
                  "line": 816,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_processPendingMutationObserversFor",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 818,
                  "column": 6
                },
                "end": {
                  "line": 822,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "finalize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../vaadin-themable-mixin/vaadin-themable-mixin.html",
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Vaadin.ThemableMixin"
            },
            {
              "name": "_includeMatchingThemes",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../vaadin-themable-mixin/vaadin-themable-mixin.html",
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Vaadin.ThemableMixin"
            },
            {
              "name": "_includeStyle",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../vaadin-themable-mixin/vaadin-themable-mixin.html",
                "start": {
                  "line": 61,
                  "column": 4
                },
                "end": {
                  "line": 67,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "moduleName"
                },
                {
                  "name": "template"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Vaadin.ThemableMixin"
            }
          ],
          "demos": [
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 823,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.OverlayElement",
          "attributes": [
            {
              "name": "opened",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 10
                },
                "end": {
                  "line": 238,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "owner",
              "description": "Owner element passed with renderer function",
              "sourceRange": {
                "start": {
                  "line": 243,
                  "column": 10
                },
                "end": {
                  "line": 243,
                  "column": 24
                }
              },
              "metadata": {},
              "type": "Element | null | undefined"
            },
            {
              "name": "renderer",
              "description": "Custom function for rendering the content of the overlay.\nReceives arguments `root`, `owner`, `model`\n\n`root` The root container element. Users are able to append content to it.\n\n`owner` The host element of the renderer function.\n\n`model` Object with properties that could be required during the rendering process.\n\n**NOTE:** The renderer callback can be called several times with previous content available",
              "sourceRange": {
                "start": {
                  "line": 257,
                  "column": 10
                },
                "end": {
                  "line": 257,
                  "column": 28
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "template",
              "description": "The template of the overlay content.",
              "sourceRange": {
                "start": {
                  "line": 262,
                  "column": 10
                },
                "end": {
                  "line": 265,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "instance-props",
              "description": "Optional argument for `Polymer.Templatize.templatize`.",
              "sourceRange": {
                "start": {
                  "line": 270,
                  "column": 10
                },
                "end": {
                  "line": 272,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "content",
              "description": "References the content container after the template is stamped.",
              "sourceRange": {
                "start": {
                  "line": 277,
                  "column": 10
                },
                "end": {
                  "line": 280,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "with-backdrop",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 282,
                  "column": 10
                },
                "end": {
                  "line": 286,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "model",
              "description": "Object with properties that is passed to `renderer` function",
              "sourceRange": {
                "start": {
                  "line": 291,
                  "column": 10
                },
                "end": {
                  "line": 291,
                  "column": 23
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "modeless",
              "description": "When true the overlay won't disable the main content, showing\nit doesnâ€™t change the functionality of the user interface.",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 10
                },
                "end": {
                  "line": 302,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "focus-trap",
              "description": "When true move focus to the first focusable element in the overlay,\nor to the overlay if there are no focusable elements.",
              "sourceRange": {
                "start": {
                  "line": 308,
                  "column": 10
                },
                "end": {
                  "line": 311,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "vaadin-overlay-close",
              "description": "vaadin-overlay-close\nfired before the `vaadin-overlay` will be closed. If canceled the closing of the overlay is canceled as well.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "vaadin-overlay-escape-press",
              "description": "vaadin-overlay-escape-press\nfired before the `vaadin-overlay` will be closed on ESC button press. If canceled the closing of the overlay is canceled as well.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "vaadin-overlay-open",
              "description": "vaadin-overlay-open\nfired after the `vaadin-overlay` is opened.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "vaadin-overlay-outside-click",
              "description": "We need to listen on 'click' / 'tap' event and capture it and close the overlay before\npropagating the event to the listener in the button. Otherwise, if the clicked button would call\nopen(), this would happen: https://www.youtube.com/watch?v=Z86V_ICUCD4",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "opened-changed",
              "description": "Fired when the `opened` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "template-changed",
              "description": "Fired when the `template` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "content-changed",
              "description": "Fired when the `content` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 87,
                  "column": 8
                },
                "end": {
                  "line": 87,
                  "column": 21
                }
              }
            }
          ],
          "tagname": "vaadin-overlay",
          "mixins": [
            "Vaadin.ThemableMixin"
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "src/vaadin-overlay.html",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 130,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 113,
          "column": 27
        },
        "end": {
          "line": 131,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement"
    }
  ]
}
